import axios from "axios"
import { useCallback, useContext, useEffect, useMemo, useState } from "react"
import Cre8orsContext from "./Crea8orsContext"
import transformTwitterHandle from "../helpers/transformTwitterHandle"

export const useCre8orsProvider = () => useContext(Cre8orsContext)

export const Cre8orsProvider = ({ children }) => {
  const [description, setDescription] = useState<string>("")
  const [twitterHandle, setTwitterHandle] = useState<string>("")
  const [walletAddress, setWalletAddress] = useState<string>("")
  const [loading, setLoading] = useState<boolean>(false)
  const [showResults, setShowResults] = useState<boolean>(false)
  const [name, setName] = useState<string>("")
  const [imageURI, setImageURI] = useState<string>("")
  const [twitterId, setTwitterId] = useState<string>("")
  const [tokenId, setTokenId] = useState<string>("")
  const [startConfetti, setStartConfetti] = useState<boolean>(false)
  const [txHash, setTxHash] = useState<string>("")
  const [haveTokenId, setHaveTokenId] = useState(false)

  const checkTx = useCallback(async () => {
    const response = await axios.get("/api/getTxLogs", {
      params: {
        txHash,
      },
    })
    if (response) {
      setTokenId(parseInt(response.data.logs[0].topics[3], 16).toString())
      setHaveTokenId(true)
    }
  }, [txHash])

  const postTweet = useCallback(
    async (generatedName) => {
      const response = await axios.post("/api/tweet", {
        twitterHandle,
        generatedName,
      })
      return response
    },
    [twitterHandle],
  )

  const mint = useCallback(async (reason: string, address: string) => {
    const reciept = await axios.post("/api/allowlist/mint", {
      data: {
        walletAddress: address,
        reason,
      },
    })
    return reciept
  }, [])
  const handleGenerateClick = useCallback(async () => {
    setLoading(true)

    const generatedBy = transformTwitterHandle(twitterHandle)
    setDescription(`${generated} generated by ${generatedBy}`)
    const receipt = await mint(reason, walletAddress)
    if (receipt?.data?.txReceipt) {
      setTxHash(receipt.data.txReceipt)
    }
    if (receipt.status === 200) {
      setStartConfetti(true)
      setTimeout(() => {
        setStartConfetti(false)
        setShowResults(true)
      }, 5000)
    }
    const tweetResponse = await postTweet(generated)

    if (tweetResponse?.data?.data?.id) {
      setTwitterId(tweetResponse.data.data.id)
    }
    setLoading(false)
  }, [
    twitterHandle,
    postTweet,
    getGeneratedName,
    generateImageURI,
    mintGeneratedName,
    publicWallet,
  ])

  useEffect(() => {
    let timeout = null
    if (txHash.length > 0 && !haveTokenId) {
      timeout = setTimeout(() => {
        checkTx()
      }, 5000)
    }
    return () => timeout && clearTimeout(timeout)
  }, [txHash, haveTokenId, checkTx])

  const value = useMemo(
    () => ({
      twitterHandle,
      setTwitterHandle,
      publicWallet,
      setPublicWallet,
      loading,
      setLoading,
      showResults,
      setShowResults,
      name,
      setName,
      imageURI,
      setImageURI,
      twitterId,
      setTwitterId,
      tokenId,
      setTokenId,
      handleGenerateClick,
      description,
      startConfetti,
      haveTokenId,
    }),
    [
      twitterHandle,
      setTwitterHandle,
      publicWallet,
      setPublicWallet,
      loading,
      setLoading,
      showResults,
      setShowResults,
      name,
      setName,
      imageURI,
      setImageURI,
      twitterId,
      setTwitterId,
      tokenId,
      handleGenerateClick,
      description,
      startConfetti,
      haveTokenId,
    ],
  )
  return <Cre8orsContext.Provider value={value}>{children}</Cre8orsContext.Provider>
}
